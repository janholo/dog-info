{"version":3,"sources":["features/toast/toastSlice.ts","features/navbar/navbarSlice.ts","features/breeds/breedsSlice.ts","app/store.ts","features/NotFound.tsx","features/home/Home.tsx","features/LocalisedLink.tsx","features/navbar/Navbar.tsx","features/modal-image/ModalImage.tsx","features/breed-detail/BreedDetail.tsx","features/breeds/Breeds.tsx","features/toast/Toasts.tsx","App.tsx","features/Spinner.tsx","features/localisation/Localisation.tsx","index.tsx"],"names":["Severity","navbarSlice","createSlice","name","initialState","isOpen","reducers","toggle","state","actions","selectIsOpen","navbar","breedsSlice","breeds","setBreeds","action","payload","forEach","b","displayBreed","charAt","toUpperCase","slice","toLowerCase","images","subBreeds","dataLoaded","updateBreed","asyncForEach","array","callback","a","index","length","selectBreeds","Toast","message","severity","Information","id","Math","floor","random","toastSlice","toasts","addToast","push","dismissToast","filter","t","selectToasts","toast","sleep","ms","Promise","resolve","setTimeout","store","configureStore","middleware","getDefaultMiddleware","immutableCheck","warnAfter","reducer","navbarReducer","breedsReducer","toastReducer","NotFound","className","defaultMessage","Home","values","chunks","href","LocalisedLink","props","intl","useIntl","adjustedProps","to","locale","LocalisedNavLink","Navbar","breedsMenuItem","useSelector","dispatch","useDispatch","intlData","closeBurgerMenu","useEffect","getState","fetch","response","json","data","Object","breed","imgResponse","imgJson","updatedBreed","keys","onClick","navbarBreeds","u","i","key","activeClassName","breedsDropdown","role","aria-label","aria-expanded","data-target","aria-hidden","LocalisationData","displayText","map","switchLangUrl","window","location","pathname","replace","ModalImage","imageNumber","useParams","url","useRouteMatch","undefined","subBreed","imageNumberNumber","parseInt","isNaN","imgSrc","indexOf","backUrl","nextImage","previousImage","style","width","height","maxWidth","src","alt","display","objectFit","position","left","top","maxImageCount","right","BreedDetail","subbreed","path","breedName","subBreedName","breedObject","getBreedObject","useState","page","setPage","console","warn","updateSubBreeds","sb","oldBreed","modifiedBreed","subResponse","subJson","subData","loadAdditionalData","maxPage","breedImages","margin","pagination","disabled","aria-current","subBreedBoxes","alignItems","justifyContent","render","Breeds","breedBoxes","ToastsContainer","styled","div","ToastsContainer2","Toasts","c","Error","Warning","App","listen","useHistory","el","document","activeElement","classList","contains","blur","exact","component","skChase","keyframes","skChaseDot","skChaseDotBefore","Parent","Child","Spinner","placeItems","State","LocalisedApp","messages","Loading","setMessages","then","r","Ok","catch","msg","delay","defaultLocale","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cecf5488.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppThunk } from \"../../app/store\";\n\nexport enum Severity {\n    Information,\n    Warning,\n    Error\n}\n\nexport class Toast {\n  message: string = \"<undefined>\";\n  severity: Severity = Severity.Information;\n  id: number = Math.floor(Math.random() * 100000);\n}\n\ninterface ToastState {\n  toasts: Toast[];\n}\n\nconst initialState: ToastState = {\n  toasts: [],\n};\n\nexport const toastSlice = createSlice({\n  name: \"toasts\",\n  initialState,\n  reducers: {\n    addToast: (state, action: PayloadAction<Toast>) => {\n        state.toasts.push(action.payload);\n    },\n    dismissToast: (state, action: PayloadAction<number>) => {\n      state.toasts = state.toasts.filter(t => t.id !== action.payload)\n    },\n  },\n});\n\nexport const { addToast, dismissToast } = toastSlice.actions;\n\nexport const selectToasts = (state: RootState) => state.toast.toasts;\n\nexport default toastSlice.reducer;\n\nexport const addToastWithDismiss = (msg: string, severity: Severity, delay?: number): AppThunk => async (\n  dispatch\n) => {\n\n  let t = new Toast();\n  t.message = msg;\n  t.severity = severity\n\n  dispatch(addToast(t));\n\n  await sleep(delay === undefined ? 5000 : delay );\n  \n  dispatch(dismissToast(t.id))\n\n}\n\nfunction sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","import { createSlice } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\ninterface NavbarState {\n    isOpen: boolean;\n}\n\nconst initialState: NavbarState = {\n    isOpen: false,\n}\n\nexport const navbarSlice = createSlice({\n    name: 'navbar',\n    initialState,\n    reducers: {\n        toggle: state => {\n            state.isOpen = !state.isOpen;\n        }\n    }\n})\n\nexport const { toggle } = navbarSlice.actions;\n\nexport const selectIsOpen = (state: RootState) => state.navbar.isOpen;\n\nexport default navbarSlice.reducer;","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState, AppThunk } from \"../../app/store\";\n\nexport class Breed {\n  name: string = \"<undefined>\";\n  images: string[] = [];\n  subBreeds: { [id: string]: Breed } = {};\n  dataLoaded: boolean = false;\n}\n\ninterface BreedsState {\n  breeds: { [id: string]: Breed };\n}\n\nconst initialState: BreedsState = {\n  breeds: {},\n};\n\nexport const breedsSlice = createSlice({\n  name: \"breeds\",\n  initialState,\n  reducers: {\n    setBreeds: (state, action: PayloadAction<string[]>) => {\n      state.breeds = {};\n\n      action.payload.forEach((b) => {\n        let displayBreed = b.charAt(0).toUpperCase() + b.slice(1);\n        state.breeds[b.toLowerCase()] = {\n          name: displayBreed,\n          images: [],\n          subBreeds: {},\n          dataLoaded: false\n        };\n      });\n    },\n    updateBreed: (state, action: PayloadAction<Breed>) => {\n      state.breeds[action.payload.name.toLowerCase()] = action.payload;\n    },\n  },\n});\n\nexport const { setBreeds, updateBreed } = breedsSlice.actions;\n\nexport const load = (): AppThunk => async (dispatch, getState) => {\n  let response = await fetch(`/api/breeds/list/random/5`);\n\n  let json = await response.json();\n  let data: string[] = json.message;\n\n  dispatch(setBreeds(data));\n\n  const { breeds } = getState();\n\n  // Go over all breeds and get images\n  for (let breed of Object.values(breeds.breeds)) {\n    let imgResponse = await fetch(`/api/breed/${breed.name.toLowerCase()}/images`);\n    let imgJson = await imgResponse.json();\n    let images: string[] = imgJson.message;\n    let updatedBreed = { ...breed, images: images };\n    dispatch(updateBreed(updatedBreed));\n  }\n};\n\nconst asyncForEach = async (\n  array: string[],\n  callback: (value: string, index: number, array: string[]) => Promise<void>\n) => {\n  for (let index = 0; index < array.length; index++) {\n    await callback(array[index], index, array);\n  }\n};\n\nexport const loadAdditionalData = (breed?: string): AppThunk => async (\n  dispatch,\n  getState\n) => {\n  if(breed === undefined)\n  {\n    console.warn(\"breed undefined\");\n    return;\n  }\n\n  let { breeds } = getState();\n  if(breeds.breeds[breed.toLowerCase()].dataLoaded) {\n    return;\n  }\n\n  let updateSubBreeds = (sb: { [id: string]: Breed }) => {\n    let { breeds } = getState();\n  \n    let oldBreed = breeds.breeds[breed.toLowerCase()];\n    if(oldBreed === undefined) {\n      console.warn(\"Somehow this breed is not in the list. abort!\")\n      return\n    }\n    let modifiedBreed = {...oldBreed, subBreeds: sb, dataLoaded: true }\n    dispatch(updateBreed(modifiedBreed));\n  }\n\n  let response = await fetch(`/api/breed/${breed.toLowerCase()}/list`);\n\n  let json = await response.json();\n  let data: string[] = json.message;\n\n  let subBreeds: { [id: string]: Breed } = {};\n\n  data.forEach(subBreed => {\n    let displayBreed = subBreed.charAt(0).toUpperCase() + subBreed.slice(1);\n    subBreeds[subBreed.toLowerCase()] = {\n      name: displayBreed,\n      images: [],\n      subBreeds: {},\n      dataLoaded: false\n    };\n  });\n\n  updateSubBreeds(subBreeds);\n\n  // Get all images and update breed again\n  subBreeds = {};\n\n  await asyncForEach(data, async (subBreed) => {\n    let subResponse = await fetch(\n      `/api/breed/${breed.toLowerCase()}/${subBreed.toLowerCase()}/images`\n    );\n\n    let subJson = await subResponse.json();\n    let subData: string[] = subJson.message;\n    \n    let displayBreed = subBreed.charAt(0).toUpperCase() + subBreed.slice(1);\n    subBreeds[subBreed.toLowerCase()] = {\n      name: displayBreed,\n      images: subData,\n      subBreeds: {},\n      dataLoaded: false\n    };\n  });\n\n  updateSubBreeds(subBreeds);\n};\n\nexport const selectBreeds = (state: RootState) => state.breeds.breeds;\n\nexport default breedsSlice.reducer;\n","import { configureStore, ThunkAction, Action, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport navbarReducer from '../features/navbar/navbarSlice';\nimport breedsReducer from '../features/breeds/breedsSlice';\nimport toastReducer from '../features/toast/toastSlice';\n\nexport const store = configureStore({\n  middleware: getDefaultMiddleware({immutableCheck: {warnAfter: 100}}),\n  reducer: {\n    navbar: navbarReducer,\n    breeds: breedsReducer,\n    toast: toastReducer\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react'\nimport { FormattedMessage } from 'react-intl'\n\nexport function NotFound() {\n    return (\n        <section className=\"section\">\n            <div className=\"container\">\n                <h1 className=\"title\">\n                    <FormattedMessage\n                        id=\"not-found-title\"\n                        defaultMessage=\"Not found!\"\n                    />\n                </h1>\n                <p className=\"subtitle\">\n                    <FormattedMessage\n                        id=\"not-found-text\"\n                        defaultMessage=\"This is not the page you are looking for.\"\n                    />\n\n                </p>\n            </div>\n        </section>\n    )\n}","import React, { ReactElement } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nexport function Home() {\n    return (\n        <section className=\"section\">\n            <div className=\"container\">\n                <h1 className=\"title\">\n                    <FormattedMessage\n                        id=\"info\"\n                        defaultMessage=\"Infos about Dogs\"\n                    />\n                </h1>\n                <p className=\"subtitle\">\n                    <FormattedMessage\n                        id=\"info-sub\"\n                        defaultMessage=\"A simple website using the <a>dog api</a>\"\n                        values={{\n                            a: (chunks: ReactElement) => <a href=\"https://dog.ceo/dog-api/\">{chunks}</a>,\n                          }}\n                    />\n                </p>\n            </div>\n        </section>\n    );\n}","import React from 'react'\nimport { Link, LinkProps, NavLink, NavLinkProps } from \"react-router-dom\";\nimport * as H from 'history';\nimport { useIntl } from 'react-intl';\n\nexport default function LocalisedLink<S = H.LocationState>(props: React.PropsWithoutRef<LinkProps<S>> & React.RefAttributes<HTMLAnchorElement>) {\n    const intl = useIntl()\n\n    let adjustedProps = {...props, to:`/${intl.locale}${props.to}`};\n    \n    return (\n        <Link {...adjustedProps}></Link>\n    )\n}\n\nexport function LocalisedNavLink<S = H.LocationState>(props: React.PropsWithoutRef<NavLinkProps<S>> & React.RefAttributes<HTMLAnchorElement>) {\n    const intl = useIntl()\n\n    let adjustedProps = {...props, to:`/${intl.locale}${props.to}`};\n    \n    return (\n        <NavLink {...adjustedProps}></NavLink>\n    )\n}\n","import React, { useEffect, ReactElement } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    toggle,\n    selectIsOpen\n} from './navbarSlice';\nimport { selectBreeds, load } from '../breeds/breedsSlice';\nimport { Link } from 'react-router-dom';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport LocalisedLink, { LocalisedNavLink } from '../LocalisedLink'\nimport { LocalisationData } from '../localisation/Localisation'\n\nexport function Navbar() {\n    const isOpen = useSelector(selectIsOpen);\n    const breeds = useSelector(selectBreeds);\n    const dispatch = useDispatch();\n    const intlData = useIntl();\n\n    let closeBurgerMenu = () => {\n        if (isOpen) {\n            dispatch(toggle());\n        }\n    }\n\n    useEffect(() => {\n        dispatch(load());\n        // eslint-disable-next-line\n    }, []);\n\n    let breedsMenuItem;\n    if (Object.keys(breeds).length === 0) {\n        breedsMenuItem = (\n            <LocalisedLink to=\"/breeds\" className=\"navbar-item\" onClick={() => closeBurgerMenu()}>\n                <FormattedMessage\n                    id=\"breeds\"\n                    defaultMessage=\"Breeds\"\n                />\n            </LocalisedLink>\n        );\n    }\n    else {\n        let navbarBreeds: ReactElement[] = [];\n        Object.keys(breeds).forEach((u, i) => {\n\n            navbarBreeds.push(\n                <LocalisedNavLink to={\"/breeds/\" + u} key={i} className=\"navbar-item\" activeClassName=\"is-active\" onClick={() => closeBurgerMenu()}>\n                    {breeds[u].name}\n                </LocalisedNavLink>);\n        });\n\n        let breedsDropdown = (\n            <div className=\"navbar-dropdown\">\n                {navbarBreeds}\n            </div>\n        )\n\n        breedsMenuItem = (\n            <div className=\"navbar-item has-dropdown is-hoverable\">\n                <LocalisedLink to=\"/breeds\" className=\"navbar-link\" onClick={() => closeBurgerMenu()}>\n                    <FormattedMessage\n                        id=\"breeds\"\n                        defaultMessage=\"Breeds\"\n                    />\n                </LocalisedLink>\n                {breedsDropdown}\n            </div>\n        );\n    }\n\n    /* eslint-disable jsx-a11y/anchor-is-valid */\n    return (\n        <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n                <LocalisedLink to=\"/\" className=\"navbar-item\" onClick={() => closeBurgerMenu()}>\n                    <span role=\"img\" aria-label=\"dog\" className=\"is-size-4\">🐕</span>\n                </LocalisedLink>\n\n                <a className={`navbar-burger burger ${isOpen ? \"is-active\" : \"\"}`} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\" onClick={() => dispatch(toggle())}>\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                </a>\n            </div>\n\n            <div id=\"navbarBasicExample\" className={`navbar-menu ${isOpen ? \"is-active\" : \"\"}`}>\n                <div className=\"navbar-start\">\n                    {breedsMenuItem}\n                </div>\n                <div className=\"navbar-end\">\n                    <div className=\"navbar-item has-dropdown is-hoverable\">\n                        <p className=\"navbar-link\">\n                            {LocalisationData[intlData.locale].displayText}\n                        </p>\n                        <div className=\"navbar-dropdown\">\n                            {Object.keys(LocalisationData).map((locale, i) => {\n                                // replace locale (javascript replace only replaces first occurence)\n                                let switchLangUrl = window.location.pathname.replace(`/${intlData.locale}`, `/${locale}`);\n                                if(locale !== intlData.locale) {\n                                    return (\n                                        <Link to={switchLangUrl} key={i} className=\"navbar-item\" onClick={() => closeBurgerMenu()}>\n                                            {LocalisationData[locale].displayText}\n                                        </Link>\n                                    )\n                                } else {\n                                    return (\n                                        <div key={i} className=\"navbar-item has-text-weight-bold has-text-link\">\n                                            {LocalisationData[locale].displayText}\n                                        </div>\n                                    )\n                                }\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n    /* eslint-enable */\n}","import React from 'react'\nimport { useParams, useRouteMatch, Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectBreeds } from '../breeds/breedsSlice';\n\ntype ModalImageProps = {\n    breed: string,\n    subBreed: string | undefined\n    maxImageCount: number\n}\n\ninterface RouteParams {\n    imageNumber: string\n}\n\nexport function ModalImage(props: ModalImageProps) {\n    let { imageNumber } = useParams<RouteParams>();\n    let { url } = useRouteMatch();\n    const breeds = useSelector(selectBreeds);\n\n    let breed = breeds[props.breed];\n\n    if (breed === undefined) {\n        return <></>\n    }\n\n    if (props.subBreed !== undefined) {\n        breed = breed.subBreeds[props.subBreed];\n\n        if (breed === undefined) {\n            return <></>\n        }\n    }\n\n    let imageNumberNumber = parseInt(imageNumber);\n\n    if (isNaN(imageNumberNumber)) {\n        return <></>\n    }\n    let imgSrc = breed.images[imageNumberNumber];\n\n    if (imgSrc === undefined) {\n        return <></>\n    }\n\n    let index = url.indexOf(\"/image/\");\n    let backUrl = url.slice(0, index);\n\n    let nextImage = backUrl + \"/image/\" + (imageNumberNumber + 1);\n    let previousImage = backUrl + \"/image/\" + (imageNumberNumber - 1);\n\n    return (\n        <div className=\"modal is-active\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content\" style={{ width: \"100%\", height: \"100%\", maxWidth: \"calc(100vw - 40px)\" }}>\n                <img src={imgSrc} alt={breed.name} style={{ display: \"block\", objectFit: \"contain\", width: \"100%\", height: \"100%\" }} />\n            </div>\n            <Link to={backUrl}>\n                <button className=\"modal-close is-large\" aria-label=\"close\"></button>\n            </Link>\n            {imageNumberNumber > 0 &&\n                <div style={{ position: \"fixed\", left: \"5vw\", top: \"90%\" }}>\n                    <Link to={previousImage}>\n                        <button className=\"button is-link\">\n                            &#060;\n                        </button>\n                    </Link>\n                </div>\n            }\n            {imageNumberNumber < (props.maxImageCount - 1) &&\n                <div style={{ position: \"fixed\", right: \"5vw\", top: \"90%\" }}>\n                    <Link to={nextImage}>\n                        <button className=\"button is-link\">\n                            &#062;\n                        </button>\n                    </Link>\n                </div>\n            }\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { useParams, useRouteMatch, Switch, Route, Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadAdditionalData, selectBreeds, Breed } from '../breeds/breedsSlice';\nimport { ModalImage } from '../modal-image/ModalImage'\nimport LocalisedLink from '../LocalisedLink';\nimport { FormattedMessage } from 'react-intl';\n\nexport function BreedDetail() {\n    let { breed, subbreed } = useParams();\n    let { path, url } = useRouteMatch();\n\n    let breedName: string = breed;\n    let subBreedName: string = subbreed;\n\n    const dispatch = useDispatch();\n    const breeds = useSelector(selectBreeds);\n    const breedObject = getBreedObject(breeds, breedName, subBreedName);\n\n    const [page, setPage] = useState(0);\n\n    useEffect(() => {\n        setPage(0);\n        if (subBreedName !== undefined) {\n            // skip sub breeds\n            return\n        }\n        dispatch(loadAdditionalData(breedObject?.name));\n        // eslint-disable-next-line\n    }, [breed, subbreed]);\n\n    if (breedObject === undefined) {\n        return (\n            <div className=\"section\">\n                <div className=\"container\">\n                    <h1 className=\"title\">\n                        <FormattedMessage\n                            id=\"loading\"\n                            defaultMessage=\"Loading...\"\n                        />\n                    </h1>\n                </div>\n            </div>\n        )\n    }\n\n    const imagesPerPage = 20;\n    const maxPage = Math.floor(breedObject?.images.length / imagesPerPage);\n\n    let pageImages = breedObject.images.slice(page * imagesPerPage, page * imagesPerPage + imagesPerPage);\n\n    let breedImages = pageImages.map((u, i) => {\n        return (\n            <div className=\"column is-3\" key={i}>\n                <Link to={`${url}/image/${i + page * imagesPerPage}`} className=\"box\">\n                    <img src={u} alt={breedObject.name} style={{display: \"block\", margin: \"0 auto\"}}></img>\n                </Link>\n            </div>);\n    });\n\n    let pagination =\n        (\n            <nav className=\"pagination is-centered\" role=\"navigation\" aria-label=\"pagination\">\n                <button className=\"pagination-previous\" disabled={page <= 0} onClick={() => setPage(page - 1)}>\n                    <FormattedMessage\n                        id=\"previous\"\n                        defaultMessage=\"Previous\"\n                    />\n                </button>\n                <button className=\"pagination-next\" disabled={page >= maxPage} onClick={() => setPage(page + 1)}>\n                    <FormattedMessage\n                        id=\"next\"\n                        defaultMessage=\"Next\"\n                    />\n                </button>\n                <ul className=\"pagination-list\">\n                    {page > 1 &&\n                        <li>\n                            <button className=\"pagination-link\" onClick={() => setPage(0)}>1</button>\n                        </li>\n                    }\n                    {page > 2 &&\n                        <li>\n                            <span className=\"pagination-ellipsis\">&hellip;</span>\n                        </li>\n                    }\n                    {page > 0 &&\n                        <li>\n                            <button className=\"pagination-link\" onClick={() => setPage(page - 1)}>{page}</button>\n                        </li>\n                    }\n                    <li>\n                        <button className=\"pagination-link is-current\" aria-current=\"page\">{page + 1}</button>\n                    </li>\n                    {page < maxPage &&\n                        <li>\n                            <button className=\"pagination-link\" onClick={() => setPage(page + 1)}>{page + 2}</button>\n                        </li>\n                    }\n                    {page + 2 < maxPage &&\n                        <li>\n                            <span className=\"pagination-ellipsis\">&hellip;</span>\n                        </li>\n                    }\n                    {page + 1 < maxPage &&\n                        <li>\n                            <button className=\"pagination-link\" onClick={() => setPage(maxPage)}>{maxPage + 1}</button>\n                        </li>\n                    }\n                </ul>\n            </nav>\n        )\n\n    let subBreedBoxes = Object.keys(breedObject.subBreeds).map((u, i) => {\n        let subBreed = breedObject.subBreeds[u];\n        return (\n            <div className=\"column is-4\" key={i}>\n                <LocalisedLink to={`/subbreeds/${breedObject.name.toLowerCase()}/${subBreed.name.toLowerCase()}`} className=\"box\" style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-around\" }}>\n                    <h2 className=\"is-size-5\">\n                        {subBreed.name}\n                    </h2>\n                    {subBreed.images.length !== 0 && (\n                        <figure className=\"image is-128x128\">\n                            <img src={subBreed.images[0]} alt={subBreed.name} className=\"is-rounded\" style={{ objectFit: \"cover\", width: 128, height: 128 }}></img>\n                        </figure>\n                    )}\n                </LocalisedLink>\n            </div>);\n    });\n\n\n    return (\n        <>\n            <div className=\"section\">\n                <div className=\"container\">\n                    <h1 className=\"title is-3\">{breedObject.name}</h1>\n                    {subBreedName !== undefined &&\n                        <p className=\"subtitle\">\n                            <FormattedMessage\n                                id=\"sub-breed-link\"\n                                defaultMessage=\"Is a sub-breed of <a></a>\"\n                                values={{\n                                    a: () => <LocalisedLink to={`/breeds/${breedName.toLowerCase()}`}>{\" \" + breeds[breedName].name}</LocalisedLink>,\n                                }}\n                            />\n                        </p>\n                    }\n                </div>\n            </div>\n            {subBreedBoxes.length !== 0 &&\n                <div className=\"section\">\n                    <div className=\"container\">\n                        <h2 className=\"title is-4\">\n                            <FormattedMessage\n                                id=\"sub-breeds\"\n                                defaultMessage=\"Sub-breeds\"\n                            />\n                        </h2>\n                        <div className=\"columns is-multiline\">\n                            {subBreedBoxes}\n                        </div>\n                    </div>\n                </div>\n            }\n            <div className=\"section\">\n                <div className=\"container\">\n                    <h2 className=\"title is-4\">\n                        <FormattedMessage\n                            id=\"images\"\n                            defaultMessage=\"Images\"\n                        />\n                    </h2>\n                    {pagination}\n                    <div className=\"columns is-multiline\">\n                        {breedImages}\n                    </div>\n                    {pagination}\n                </div>\n            </div>\n            <Switch>\n                <Route path={`${path}/image/:imageNumber`} render={() => <ModalImage breed={breed} subBreed={subbreed} maxImageCount={breedObject.images.length} />} />\n            </Switch>\n        </>\n    )\n}\n\nfunction getBreedObject(breeds: { [id: string]: Breed }, breedName: string, subBreedName: string): Breed | undefined {\n    let breed = breeds[breedName];\n\n    if (breed === undefined) {\n        return undefined;\n    }\n\n    if (subBreedName !== undefined) {\n        return breed.subBreeds[subBreedName];\n    }\n\n    return breed;\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectBreeds } from '../breeds/breedsSlice';\nimport LocalisedLink from '../LocalisedLink';\nimport { FormattedMessage } from 'react-intl';\n\nexport function Breeds() {\n    const breeds = useSelector(selectBreeds);\n\n    if (Object.keys(breeds).length === 0) {\n        return NoBreedsFound();\n    }\n\n    let breedBoxes = Object.keys(breeds).map((u, i) => {\n        let breed = breeds[u];\n        return (\n            <div className=\"column is-4\" key={i}>\n                <LocalisedLink to={\"/breeds/\" + u} className=\"box\" style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-around\" }}>\n                    <h2 className=\"is-size-5\">\n                        {breed.name}\n                    </h2>\n                    {breed.images.length !== 0 && (\n                        <figure className=\"image is-128x128\">\n                            <img src={breed.images[0]} alt={breed.name} className=\"is-rounded\" style={{ objectFit: \"cover\", width: 128, height: 128 }}></img>\n                        </figure>\n                    )}\n                </LocalisedLink>\n            </div>);\n    });\n\n    return (\n        <>\n            <section className=\"section\">\n                <div className=\"container\">\n                    <h1 className=\"title\">\n                        <FormattedMessage\n                            id=\"breeds\"\n                            defaultMessage=\"Breeds\" />\n                    </h1>\n                    <p className=\"subtitle\">\n                        <FormattedMessage\n                            id=\"select-breed\"\n                            defaultMessage=\"Select a breed to show more information\" />\n                    </p>\n                </div>\n            </section>\n            <section className=\"section\">\n                <div className=\"container\">\n                    <div className=\"columns is-multiline\">\n                        {breedBoxes}\n                    </div>\n                </div>\n            </section>\n        </>\n    );\n}\n\nfunction NoBreedsFound() {\n    return (\n        <section className=\"section\">\n            <div className=\"container\">\n                <h1 className=\"title\">\n                    <FormattedMessage\n                        id=\"breeds\"\n                        defaultMessage=\"Breeds\"\n                    />\n                </h1>\n                <p className=\"subtitle\">\n                    <FormattedMessage\n                        id=\"loading\"\n                        defaultMessage=\"Loading...\"\n                    />\n                </p>\n            </div>\n        </section>\n    )\n}","import React from 'react'\nimport styled from 'styled-components';\nimport { selectToasts, dismissToast, Severity } from '../toast/toastSlice';\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst ToastsContainer = styled.div`\n    position: fixed;\n    display: grid;\n    justify-items: right;\n    align-items: center;\n    width: 100%;\n    z-index: 19;\n`;\n\nconst ToastsContainer2 = styled.div`\n    margin-top: 2vw;\n    margin-right: 2vw;\n`;\n\nexport default function Toasts() {\n\n    let toasts = useSelector(selectToasts);\n    let dispatch = useDispatch();\n\n    if(toasts.length === 0) {\n        return <></>\n    }\n\n    return (    \n        <ToastsContainer>\n            <ToastsContainer2>\n                {toasts.map(t => {\n                    let c = t.severity === Severity.Error ? \"is-danger\" : t.severity === Severity.Warning ? \"is-warning\" : \"\";\n                    return (\n                        <div className={`notification ${c}`}>\n                            <button className=\"delete\" onClick={() => dispatch(dismissToast(t.id))}></button>\n                            {t.message}\n                        </div>\n                    )\n                })}\n\n            </ToastsContainer2>\n        </ToastsContainer>\n    )\n}","import React, { useEffect } from 'react';\nimport { Home } from './features/home/Home';\nimport { Navbar } from './features/navbar/Navbar';\nimport { BreedDetail } from './features/breed-detail/BreedDetail'\nimport { Breeds } from './features/breeds/Breeds'\nimport { NotFound } from './features/NotFound'\nimport Toasts from './features/toast/Toasts'\nimport './App.scss';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { useHistory } from \"react-router-dom\";\n\nfunction App() {\n  const { listen } = useHistory();\n  let { path } = useRouteMatch();\n\n  useEffect(\n    () =>\n      listen(() => {\n        const el = document.activeElement as HTMLElement;\n\n        el?.classList?.contains(\"navbar-item\") && el.blur();\n      }),\n    [listen]\n  );\n\n  return (\n    <>\n      <Navbar></Navbar>\n      <Toasts></Toasts>\n      <Switch>\n        <Route exact path={`${path}/`} component={Home} />\n        <Route exact path={`${path}/breeds`} component={Breeds} />\n        <Route path={`${path}/breeds/:breed`} component={BreedDetail} />\n        <Route path={`${path}/subbreeds/:breed/:subbreed`} component={BreedDetail} />\n        <Route path=\"*\" component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components';\n\nconst skChase = keyframes`\n{\n    100% { transform: rotate(360deg); } \n}\n`;\n\nconst skChaseDot = keyframes`\n{\n    80%, 100% { transform: rotate(360deg); } \n}\n`;\n\nconst skChaseDotBefore = keyframes`\n    50% {\n      transform: scale(0.4); \n    } \n    100%, 0% {\n      transform: scale(1.0); \n    } \n\n`;\n\nconst Parent = styled.div`\n    width: 40px;\n    height: 40px;\n    position: relative;\n    animation: ${skChase} 2.5s infinite linear both;\n`;\n\nconst Child = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0; \n    animation: ${skChaseDot} 2.0s infinite ease-in-out both;\n\n    &:before {\n        content: '';\n        display: block;\n        width: 25%;\n        height: 25%;\n        background-color: #34495e;\n        border-radius: 100%;\n        animation: ${skChaseDotBefore} 2.0s infinite ease-in-out both; \n    }\n\n    &:nth-child(1) { animation-delay: -1.1s; }\n    &:nth-child(2) { animation-delay: -1.0s; }\n    &:nth-child(3) { animation-delay: -0.9s; }\n    &:nth-child(4) { animation-delay: -0.8s; }\n    &:nth-child(5) { animation-delay: -0.7s; }\n    &:nth-child(6) { animation-delay: -0.6s; }\n    &:nth-child(1):before { animation-delay: -1.1s; }\n    &:nth-child(2):before { animation-delay: -1.0s; }\n    &:nth-child(3):before { animation-delay: -0.9s; }\n    &:nth-child(4):before { animation-delay: -0.8s; }\n    &:nth-child(5):before { animation-delay: -0.7s; }\n    &:nth-child(6):before { animation-delay: -0.6s; }\n`;\n\nexport default function Spinner() {\n    return (\n        <section className=\"section\">\n            <div className=\"container\" style={{display: \"grid\", placeItems: \"center\"}}>\n                <Parent>\n                    <Child></Child>\n                    <Child></Child>\n                    <Child></Child>\n                    <Child></Child>\n                    <Child></Child>\n                    <Child></Child>\n                </Parent>\n            </div>\n        </section>\n    )\n}","import React, { useState, useEffect } from 'react'\nimport App from '../../App';\nimport { IntlProvider } from 'react-intl'\nimport { MessageFormatElement } from 'intl-messageformat-parser/src/types'\nimport Spinner from '../Spinner';\nimport { useDispatch } from 'react-redux';\nimport { Severity, addToastWithDismiss } from '../toast/toastSlice';\n\nexport class Locale {\n    displayText: string = \"\";\n}\n\nexport const LocalisationData: { [locale: string]: Locale } = {\n    \"en\": { displayText: \"English\" },\n    \"de\": { displayText: \"Deutsch\" },\n}\n\ninterface ILocalisedAppProps {\n    locale: string\n}\n\nenum State {\n    FailedToLoadLanguageData,\n    Loading,\n    Ok\n}\n\nexport function LocalisedApp(props: ILocalisedAppProps) {\n    let [messages, setMessages] = useState<{messages: Record<string, string> | Record<string, MessageFormatElement[]> | undefined, state: State, locale: string}>({messages: undefined, state: State.Loading, locale: \"en\"});\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        // locale changed, load messages\n        if(props.locale !== \"en\") {\n            setMessages({messages: undefined, state: State.Loading, locale: props.locale});\n\n            fetch(`/compiled-lang/${props.locale}.json`)\n                .then(r => r.json())\n                .then(json => {\n                    setMessages({messages: json, state: State.Ok, locale: props.locale});\n                })\n                .catch(() => {\n                    setMessages({messages: undefined, state: State.Ok, locale: \"en\"});\n                    dispatch(addToastWithDismiss(\"Failed to load language data - Page is displayed in english as fallback\", Severity.Error));\n                });    \n        }\n        else {\n            setMessages({messages: undefined, state: State.Ok, locale: props.locale});\n        }\n    }, [props.locale, dispatch]);\n\n\n    if(messages.state === State.Loading) {\n        return <Spinner></Spinner>\n    }\n\n    return (\n        <IntlProvider messages={messages.messages} locale={props.locale} defaultLocale=\"en\">\n            <App />\n        </IntlProvider>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport './index.scss';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport { NotFound } from './features/NotFound';\nimport { LocalisedApp } from './features/localisation/Localisation'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <BrowserRouter>\n          <Switch>\n            <Route path=\"/en\" render={() => <LocalisedApp locale=\"en\" />} />\n            <Route path=\"/de\" render={() => <LocalisedApp locale=\"de\" />} />\n            <Route exact path=\"/\" render={() => <Redirect to=\"/en\" />} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}